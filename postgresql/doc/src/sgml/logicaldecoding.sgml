<!-- doc/src/sgml/logicaldecoding.sgml -->
 <chapter id="logicaldecoding">
  <!-- 
  <title>Logical Decoding</title>
  -->
  <title>逻辑解码</title>
  <indexterm zone="logicaldecoding">
   <!-- 
   <primary>Logical Decoding</primary>
   -->
   <primary>逻辑解码</primary>
  </indexterm>
  <!-- 
  <para>
   PostgreSQL provides infrastructure to stream the modifications performed
   via SQL to external consumers.  This functionality can be used for a
   variety of purposes, including replication solutions and auditing.
  </para>
  -->
  <para>
  PostgreSQL提供基础架构，将通过SQL执行的修改流式传输到外部使用者。
   这种功能可以被用于多种目的，包括复制方案以及审计。
  </para>

  <para>
   在流中被送出的更改通过逻辑复制槽标识。每个流正好把每一个更改输出一次。
  </para>

  <para>
   流式传输这些更改的格式由使用的输出插件决定。PostgreSQL 发布中包括了
   一个例子插件。可以编写额外的插件来扩展可用的格式选择，而无需修改任何
   核心代码。每一个输出插件都能访问每一个由
   <command>INSERT</command>产生的新行以及每一个由
   <command>UPDATE</command>创建的新行版本。
   <command>UPDATE</command>和<command>DELETE</command>
   的旧行版本的可用性取决于配置的复制标识（见
   <xref linkend="SQL-CREATETABLE-REPLICA-IDENTITY">）。
  </para>

  <para>
   可以通过流复制协议（见<xref linkend="protocol-replication">和
   <xref linkend="logicaldecoding-walsender">）或者通过 SQL 调用函数（
   <xref linkend="logicaldecoding-sql">）来接收流式传送的更改。也可以编写额外的
   接收复制槽输出的模块而无需修改核心代码（
   <xref linkend="logicaldecoding-writer">）。
  </para>

  <sect1 id="logicaldecoding-example">
   <title>逻辑解码的例子</title>

   <para>
    下面的例子演示了使用 SQL 接口控制逻辑解码。
   </para>

   <para>
    在你能使用逻辑解码之前，你必须设置<xref linkend="guc-wal-level">为
    <literal>logical</literal>，并且<xref linkend="guc-max-replication-slots">
    必须至少被设置为 1。然后，你应该作为一个超级用户连接到目标数据库（在下面
    的例子中是<literal>postgres</literal>）。
   </para>

<programlisting>
postgres=# -- 使用输出插件'test_decoding'创建一个名为'regression_slot'的槽
postgres=# SELECT * FROM pg_create_logical_replication_slot('regression_slot', 'test_decoding');
    slot_name    | xlog_position
-----------------+---------------
 regression_slot | 0/16B1970
(1 row)

postgres=# SELECT slot_name, plugin, slot_type, database, active, restart_lsn FROM pg_replication_slots;
    slot_name    |    plugin     | slot_type | database | active | restart_lsn
-----------------+---------------+-----------+----------+--------+-------------
 regression_slot | test_decoding | logical   | postgres | f      | 0/16A4408
(1 row)

postgres=# -- 目前还看不到更改
postgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);
 location | xid | data
----------+-----+------
(0 rows)

postgres=# CREATE TABLE data(id serial primary key, data text);
CREATE TABLE

postgres=# -- DDL 没有被复制，因此你将看到的东西只有事务
postgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);
 location  | xid |    data
-----------+-----+------------
 0/16D5D48 | 688 | BEGIN 688
 0/16E0380 | 688 | COMMIT 688
(2 rows)

postgres=# -- 一单读到更改，它们会被消费掉并且不会在一个后续调用中被发出：
postgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);
 location | xid | data
----------+-----+------
(0 rows)

postgres=# BEGIN;
postgres=# INSERT INTO data(data) VALUES('1');
postgres=# INSERT INTO data(data) VALUES('2');
postgres=# COMMIT;

postgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);
 location  | xid |                     data
-----------+-----+-----------------------------------------------
 0/16E0478 | 689 | BEGIN 689
 0/16E0478 | 689 | table public.data: INSERT: id[integer]:1 data[text]:'1'
 0/16E0580 | 689 | table public.data: INSERT: id[integer]:2 data[text]:'2'
 0/16E0650 | 689 | COMMIT 689
(4 rows)

postgres=# INSERT INTO data(data) VALUES('3');

postgres=# -- 你也可以不消费更改而在更改流中先看一看
postgres=# SELECT * FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL);
 location  | xid |                     data
-----------+-----+-----------------------------------------------
 0/16E09C0 | 690 | BEGIN 690
 0/16E09C0 | 690 | table public.data: INSERT: id[integer]:3 data[text]:'3'
 0/16E0B90 | 690 | COMMIT 690
(3 rows)

postgres=# -- 接下来对 pg_logical_slot_peek_changes() 的调用再次返回相同的更改
postgres=# SELECT * FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL);
 location  | xid |                     data
-----------+-----+-----------------------------------------------
 0/16E09C0 | 690 | BEGIN 690
 0/16E09C0 | 690 | table public.data: INSERT: id[integer]:3 data[text]:'3'
 0/16E0B90 | 690 | COMMIT 690
(3 rows)

postgres=# -- 可以向输出插件传递选项来影响格式化
postgres=# SELECT * FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL, 'include-timestamp', 'on');
 location  | xid |                     data
-----------+-----+-----------------------------------------------
 0/16E09C0 | 690 | BEGIN 690
 0/16E09C0 | 690 | table public.data: INSERT: id[integer]:3 data[text]:'3'
 0/16E0B90 | 690 | COMMIT 690 (at 2014-02-27 16:41:51.863092+01)
(3 rows)

postgres=# -- 当不再需要一个槽后记住销毁它以停止消耗服务器资源：
postgres=# SELECT pg_drop_replication_slot('regression_slot');
 pg_drop_replication_slot
-----------------------

(1 row)
</programlisting>

   <!-- 
   <para>
    The following example shows how logical decoding is controlled over the
    streaming replication protocol, using the
    program <xref linkend="app-pgrecvlogical"> included in the PostgreSQL
    distribution.  This requires that client authentication is set up to allow
    replication connections
    (see <xref linkend="streaming-replication-authentication">) and
    that <varname>max_wal_senders</varname> is set sufficiently high to allow
    an additional connection.
   </para>
   -->
   <para>
    下面的例子展示了如何在流复制协议上使用 PostgreSQL 发布所包括的程序
    <xref linkend="app-pgrecvlogical">来控制逻辑解码。这要求设置客户端
    认证以允许复制连接（见<xref linkend="streaming-replication-authentication">），
    并且把<varname>max_wal_senders</varname>设置成足够高以允许一个
    额外的连接。
   </para>
<programlisting>
$ pg_recvlogical -d postgres --slot test --create-slot
$ pg_recvlogical -d postgres --slot test --start -f -
<keycombo action="simul"><keycap>Control</><keycap>Z</></>
$ psql -d postgres -c "INSERT INTO data(data) VALUES('4');"
$ fg
BEGIN 693
table public.data: INSERT: id[integer]:4 data[text]:'4'
COMMIT 693
<keycombo action="simul"><keycap>Control</><keycap>C</></>
$ pg_recvlogical -d postgres --slot test --drop-slot
</programlisting>
  </sect1>

  <sect1 id="logicaldecoding-explanation">
   <title>逻辑解码概念</title>
   <sect2>
    <title>逻辑解码</title>

    <indexterm>
     <primary>逻辑解码</primary>
    </indexterm>

    <para>
     逻辑解码是一种将对数据库表的所有持久更改抽取到一种清晰、易于理解的格式
     的处理，这种技术允许在不了解数据库内部状态的详细知识的前提下解释该格式。
    </para>

    <para>
     在<productname>PostgreSQL</productname>中，逻辑解码通过解码
     <link linkend="wal">预写式日志</link>的内容来实现，预写式日志描述了存储
     层面上的更改，而逻辑解码则会把更改解码成一种应用相关的形式，例如一个元组
     流或者 SQL 语句流。
    </para>
   </sect2>

   <sect2>
    <title>复制槽</title>

    <indexterm>
     <primary>复制槽</primary>
     <secondary>逻辑复制</secondary>
    </indexterm>

    <para>
     在逻辑复制的环境下，一个槽表示一个更改流，这些更改可以在客户机上以它们
     在原服务器上产生的顺序被重播。每一个流从一个单一数据库中流式传送更改序
     列，每一个更改只发送一次（除非在流中向前预览）。
    </para>

    <note>
     <para><productname>PostgreSQL</productname>也有流复制槽（
     见<xref linkend="streaming-replication">），但是它们的使用有所不同。
     </para>
    </note>

    <para>
     一个复制槽在一个<productname>PostgreSQL</productname>集簇的所
     有数据库之间具有一个唯一的标识符。槽在使用它们的连接之间保持独立并且
     对于崩溃是安全的。
    </para>

    <para>
     对于同一个数据库可能会存在多个独立的槽。每一个槽有自己的状态，允许不
     同的消费者从该数据库的更改流中的不同点开始接收更改。对于大多数应用，
     每一个消费者都将要求一个单独的槽。
    </para>

    <para>
     逻辑复制槽完全不知道接收者的状态。甚至可能会有多个不同的接收者在不同
     时间使用同一个槽，它们将只是从上一个接收者停止消费更改的地方开始得到
     更改。但在任一给定时刻，只有一个接收者可以从一个槽中消费更改。
    </para>

    <note>
     <para>
      复制槽可以在崩溃时保持，并且不知道其消费者的状态。即便没有连接使用它们，
      它们也将阻止移除所需的资源。这会消耗存储，因为只要还有一个复制槽需要，
      WAL 和来自于系统目录的行就不能被<command>VACUUM</command>移除。
      因此如果不再需要一个槽，那就应该删除它。
     </para>
    </note>
   </sect2>

   <sect2>
    <title>输出插件</title>
    <para>
     输出插件将数据从预写式日志的内部表示转换成复制槽的消费者所需的格式。
    </para>
   </sect2>

   <sect2>
    <title>导出快照</title>
    <para>
     当使用流复制接口创建一个新的复制槽时，一个快照将被导出（见
     <xref linkend="functions-snapshot-synchronization">），在它所显示的
     数据库状态之后所有的更改都将被包括在更改流中。通过使用
     <link linkend="sql-set-transaction"><literal>SET TRANSACTION
     SNAPSHOT</literal></link>读取槽被创建时的数据库状态，这可以用来创建
     一个新的复制。然后这个事务可以被用来及时转储那一点的数据库状态，它后来
     可以被槽的内容更新而不丢失任何更改。
    </para>
   </sect2>
  </sect1>

  <sect1 id="logicaldecoding-walsender">
   <title>流复制协议接口</title>

   <para>
    命令
    <itemizedlist>
     <listitem>
      <para><literal>CREATE_REPLICATION_SLOT <replaceable>slot_name</replaceable> LOGICAL <replaceable>output_plugin</replaceable></literal></para>
     </listitem>

     <listitem>
      <para><literal>DROP_REPLICATION_SLOT <replaceable>slot_name</replaceable></literal></para>
     </listitem>

     <listitem>
      <para><literal>START_REPLICATION SLOT <replaceable>slot_name</replaceable> LOGICAL ...</literal></para>
     </listitem>
    </itemizedlist>
    被用来创建、删除以及流式传送一个复制槽。这些命令只能在一个复制连接上使用。
    它们不能通过 SQL 使用。这些命令的详情请见
    <xref linkend="protocol-replication">。
   </para>

   <para>
    命令<xref linkend="app-pgrecvlogical">可以被用来控制一个流复制连接上的逻辑
    解码（它在内部使用上述命令）。
   </para>
  </sect1>

  <sect1 id="logicaldecoding-sql">
   <title>逻辑解码的 <acronym>SQL</acronym> 接口</title>

   <para>
     与逻辑解码互动的 SQL 层 API 详见<xref linkend="functions-replication">。
   </para>

   <para>
    同步复制（见<xref linkend="synchronous-replication">）只在使用流复制接口的复制槽上
    支持。函数接口以及额外的、非核心的接口不支持同步复制。
   </para>
  </sect1>

  <sect1 id="logicaldecoding-catalogs">
   <title>与逻辑解码相关的系统目录</title>

   <!-- 
   <para>
    The <link linkend="view-pg-replication-slots"><structname>pg_replication_slots</structname></link>
    view and the
    <link linkend="monitoring-stats-views-table"><structname>pg_stat_replication</structname></link>
    view provide information about the current state of replication slots and
    streaming replication connections respectively. These views apply to both physical and
    logical replication.
   </para>
   -->
   <para>
    <link linkend="view-pg-replication-slots"><structname>pg_replication_slots</structname></link>
    视图和
    <link linkend="monitoring-stats-views-table"><structname>pg_stat_replication</structname></link>
    视图分别提供了有关复制槽和流复制连接的当前状态的信息。这些视图适用于物理和逻辑复制。
   </para>
  </sect1>

  <sect1 id="logicaldecoding-output-plugin">
   <title>逻辑解码输出插件</title>
   <para>
    可以在 PostgreSQL 源码树的
    <link linkend="test-decoding">
     <filename>contrib/test_decoding</filename>
    </link>子目录中找到一个输出插件的例子。
   </para>
   <sect2 id="logicaldecoding-output-init">
    <title>初始化函数</title>
    <indexterm zone="logicaldecoding">
     <primary>_PG_output_plugin_init</primary>
    </indexterm>
    <para>
     一个输出插件是通过动态载入一个以输出插件名称作为基础名称的共享库来载入的。
     将使用普通的库搜索路径来定位该库。为了提供所要求的输出插件回调并且指示该
     库确实是一个输出插件，需要提供一个名为
     <function>_PG_output_plugin_init</function>的函数。这个函数会被传入一个
     结构，其中被填充了各个动作的回调函数指针。
<programlisting>
typedef struct OutputPluginCallbacks
{
    LogicalDecodeStartupCB startup_cb;
    LogicalDecodeBeginCB begin_cb;
    LogicalDecodeChangeCB change_cb;
    LogicalDecodeCommitCB commit_cb;
    LogicalDecodeFilterByOriginCB filter_by_origin_cb;
    LogicalDecodeShutdownCB shutdown_cb;
} OutputPluginCallbacks;

typedef void (*LogicalOutputPluginInit)(struct OutputPluginCallbacks *cb);
</programlisting>
     <!-- 
     The <function>begin_cb</function>, <function>change_cb</function>
     and <function>commit_cb</function> callbacks are required,
     while <function>startup_cb</function>,
     <function>filter_by_origin_cb</function>
     and <function>shutdown_cb</function> are optional.
     -->
     回调函数<function>begin_cb</function>、<function>change_cb</function>
     以及<function>commit_cb</function>是必需的，而
     <function>startup_cb</function>、<function>filter_by_origin_cb</function>
     和<function>shutdown_cb</function>是可选的。
    </para>
   </sect2>

   <sect2 id="logicaldecoding-capabilities">
    <title>能力</title>

    <para>
     要解码、格式化并且输出更改，输出插件可以使用大部分后端的标准功能，包括调用
     输出函数。只要访问的关系是<command>initdb</command>在
     <literal>pg_catalog</literal>模式中创建的或者被使用
<programlisting>
ALTER TABLE user_catalog_table SET (user_catalog_table = true);
CREATE TABLE another_catalog_table(data text) WITH (user_catalog_table = true);
</programlisting>
     标记为用户提供的系统表，就允许对关系的只读访问。任何导致事务 ID 分配的动作
     都被禁止。其中包括写表、执行 DDL 更改以及调用<literal>txid_current()</literal>。
    </para>
   </sect2>

   <sect2 id="logicaldecoding-output-mode">
    <title>输出模式</title>

    <para>
     输出插件回调可以以近乎任意格式向消费者传递数据。对于某些用例，例如通过 SQL 
     查看更改，以可能包含任何数据的数据类型（例如<type>bytea</type>）返回数据
     可能会很麻烦。如果输出插件只输出服务器编码的文本数据，它可以在
     <link linkend="logicaldecoding-output-plugin-startup">启动回调</>中通过设
     置为<literal>OUTPUT_PLUGIN_TEXTUAL_OUTPUT</>替代
     <literal>OUTPUT_PLUGIN_BINARY_OUTPUT</>来声明这一点。在这种情况下，
     所有的数据必须是属于服务器的编码，这样一个<type>text</>数据就能包含它。在
     启用了断言的编译中会检查这一点。
    </para>
   </sect2>

   <sect2 id="logicaldecoding-output-plugin-callbacks">
    <title>输出插件回调</title>

    <para>
     一个输出插件需要提供一些回调，它通过它们得到有关更改发生的通知。
    </para>

    <para>
     并发事务以提交顺序被解码，并且只有属于特定事务的更改会在
     <literal>begin</literal>和<literal>commit</literal>回调之间被解码。被显式
     或隐式回滚的事务不会被解码。成功的检查点被折叠到包含它们的事务中，并且
     保持它们在该事务中被执行的顺序。
    </para>

    <note>
     <para>
      只有已经被安全地刷入磁盘的事务将会被解码。当
      <varname>synchronous_commit</varname>被设置为<literal>off</literal>
      时，这会导致一个<command>COMMIT</command>在随后的
      <literal>pg_logical_slot_get_changes()</literal>中不会立即被解码。
     </para>
    </note>

    <sect3 id="logicaldecoding-output-plugin-startup">
     <title>启动回调</title>
     <para>
      只要一个复制槽被创建或者被要求流式传送更改，可选的
      <function>startup_cb</function>回调就会被调用，不管有多少更改准备输出。
<programlisting>
typedef void (*LogicalDecodeStartupCB) (
    struct LogicalDecodingContext *ctx,
    OutputPluginOptions *options,
    bool is_init
);
</programlisting>
      当复制槽被创建时，<literal>is_init</literal>参数将为真，否则为假。
      <parameter>options</parameter>指向一个输出插件可以设置的选项
      的结构：
<programlisting>
typedef struct OutputPluginOptions
{
    OutputPluginOutputType output_type;
} OutputPluginOptions;
</programlisting>
      <literal>output_type</literal>必须被设置为
      <literal>OUTPUT_PLUGIN_TEXTUAL_OUTPUT</literal>
      或者<literal>OUTPUT_PLUGIN_BINARY_OUTPUT</literal>。另见
      <xref linkend="logicaldecoding-output-mode">.
     </para>

     <para>
      启动回调应该验证出现在
      <literal>ctx-&gt;output_plugin_options</literal>中的选项。如果输出插件
      需要有一个状态，它可以使用
      <literal>ctx-&gt;output_plugin_private</literal>来存储之。
     </para>
    </sect3>

    <sect3 id="logicaldecoding-output-plugin-shutdown">
     <title>关闭回调</title>

     <para>
      只要一个之前活跃的复制槽不再使用，就会调用可选的
      <function>shutdown_cb</function>回调，它可以被用来释放输出插件
      私有的资源。该槽并不一定需要被删除，只要其中的流被停止即可。
<programlisting>
typedef void (*LogicalDecodeShutdownCB) (
    struct LogicalDecodingContext *ctx
);
</programlisting>
     </para>
    </sect3>

    <sect3 id="logicaldecoding-output-plugin-begin">
     <title>事务开始回调</title>

     <para>
      只要一个已提交事务的开始动作被解码，就会调用必须提供的
      <function>begin_cb</function>回调。被中止的事务及其内容不会被解码。
<programlisting>
typedef void (*LogicalDecodeBeginCB) (
    struct LogicalDecodingContext *,
    ReorderBufferTXN *txn
);
</programlisting>
      <parameter>txn</parameter>参数包含有关该事务的元信息，例如该
      事务被提交的时间戳以及该事务的 XID。
     </para>
    </sect3>

    <sect3 id="logicaldecoding-output-plugin-commit">
     <title>事务结束回调</title>

     <para>
      只要一个已提交事务的提交动作被解码，就会调用必须提供的
      <function>commit_cb</function>回调。在此之前，如果有任何被修改
      的行，将为所有被修改的行调用<function>change_cb</function>回调。
<programlisting>
typedef void (*LogicalDecodeCommitCB) (
    struct LogicalDecodingContext *,
    ReorderBufferTXN *txn
);
</programlisting>
     </para>
    </sect3>

    <sect3 id="logicaldecoding-output-plugin-change">
     <title>更改回调</title>

     <para>
      对于一个事务中的每一个行修改，都将调用必须提供的
      <function>change_cb</function>回调，这种修改可能是一个
      <command>INSERT</command>、<command>UPDATE</command>或者
      <command>DELETE</command>。即使原始命令一次修改了多行，该回调也会
      为其中的每一行调用一次。
<programlisting>
typedef void (*LogicalDecodeChangeCB) (
    struct LogicalDecodingContext *ctx,
    ReorderBufferTXN *txn,
    Relation relation,
    ReorderBufferChange *change
);
</programlisting>
      <parameter>ctx</parameter>和<parameter>txn</parameter>参数与
      <function>begin_cb</function>和<function>commit_cb</function>
      回调具有相同的内容，但是额外多出一个关系描述符
      <parameter>relation</parameter>指向该行所属的关系以及一个结构
      <parameter>change</parameter>描述被传入的行修改。
     </para>

     <note>
      <para>
       只有没有被标记为“不做日志”（见
       <xref linkend="SQL-CREATETABLE-UNLOGGED">）并且非临时（见
       <xref linkend="SQL-CREATETABLE-TEMPORARY">）的用户定义表中的
       更改才能用逻辑解码抽取。
      </para>
     </note>
    </sect3>

     <sect3 id="logicaldecoding-output-plugin-filter-origin">
     <!-- 
     <title>Origin Filter Callback</title>
     -->
     <title>原始过滤器回调</title>

     <para>
       <!-- 
       The optional <function>filter_by_origin_cb</function> callback
       is called to determine whether data that has been replayed
       from <parameter>origin_id</parameter> is of interest to the
       output plugin.
       -->
       调用可选的<function>filter_by_origin_cb</function>
       回调来确定输出插件是否对从<parameter>origin_id</parameter>
       重放的数据感兴趣。
<programlisting>
typedef bool (*LogicalDecodeFilterByOriginCB) (
    struct LogicalDecodingContext *ctx,
    RepNodeId origin_id
);
</programlisting>
      <!-- 
      The <parameter>ctx</parameter> parameter has the same contents
      as for the other callbacks. No information but the origin is
      available. To signal that changes originating on the passed in
      node are irrelevant, return true, causing them to be filtered
      away; false otherwise. The other callbacks will not be called
      for transactions and changes that have been filtered away.
      -->
      <parameter>ctx</parameter>参数具有与其他回调相同的内容。没有信息，
      但来源是可用的。要表明源自传入的节点的更改是不相关的，返回true，
      导致它们被过滤掉；否则为假。对于已被过滤掉的事务和更改，
      不会调用其他回调。
     </para>
     <!-- 
     <para>
       This is useful when implementing cascading or multidirectional
       replication solutions. Filtering by the origin allows to
       prevent replicating the same changes back and forth in such
       setups.  While transactions and changes also carry information
       about the origin, filtering via this callback is noticeably
       more efficient.
     </para>
     -->
     <para>
       这在实现级联或多向复制解决方案时很有用。
       通过原点过滤允许防止在这样的设置中来回复制相同的改变。
       虽然事务和更改还包含有关原点的信息，通过此回调进行过滤显然更有效。
     </para>
     </sect3>
   </sect2>

   <sect2 id="logicaldecoding-output-plugin-output">
    <title>用于产生输出的函数</title>

    <para>
     在<function>begin_cb</function>、<function>commit_cb</function>或者
      <function>change_cb</function>回调中，为了实际产生输出，
      输出插件可以把数据写入到<literal>ctx-&gt;out</literal>中的
      <literal>StringInfo</literal>输出缓冲区中。在写出到输出缓冲区之前，必须先
      调用<function>OutputPluginPrepareWrite(ctx, last_write)</function>，在完
      成写入到缓冲区后，必须调用
      <function>OutputPluginWrite(ctx, last_write)</function>来执行写出。
      <parameter>last_write</parameter>指出一次特定的写出是否为该回调的最后
      一次写出。
    </para>

    <para>
     下面的例子展示了如何把数据输出给一个输出插件的消费者：
<programlisting>
OutputPluginPrepareWrite(ctx, true);
appendStringInfo(ctx->out, "BEGIN %u", txn->xid);
OutputPluginWrite(ctx, true);
</programlisting>
    </para>
   </sect2>
  </sect1>

  <sect1 id="logicaldecoding-writer">
   <title>逻辑解码输出写入器</title>

   <para>
    可以为逻辑解码增加更多输出方法。详情可见
    <filename>src/backend/replication/logical/logicalfuncs.c</filename>。
    本质上，需要提供三个函数：一个读取 WAL，一个准备写输出，另一个写输出（
    见<xref linkend="logicaldecoding-output-plugin-output">）。
   </para>
  </sect1>

  <sect1 id="logicaldecoding-synchronous">
   <title>逻辑解码的同步复制支持</title>

   <!-- 
   <para>
    Logical decoding can be used to build
    <link linkend="synchronous-replication">synchronous
    replication</link> solutions with the same user interface as synchronous
    replication for <link linkend="streaming-replication">streaming
    replication</link>.  To do this, the streaming replication interface
    (see <xref linkend="logicaldecoding-walsender">) must be used to stream out
    data. Clients have to send <literal>Standby status update (F)</literal>
    (see <xref linkend="protocol-replication">) messages, just like streaming
    replication clients do.
   </para>
   -->
   <para>
    逻辑解码可以被用来构建
    <link linkend="synchronous-replication">同步复制</link>解决方案，该方案
    具有和<link linkend="streaming-replication">流复制</link>的同步复制
    相同的用户接口。要这样做，流复制接口（见
    <xref linkend="logicaldecoding-walsender">）必须被用来流式传出数据。
    正如流复制客户端所作的一样，逻辑解码的客户端必须发出
    <literal>后备机状态更新 (F)</literal>
    （见<xref linkend="protocol-replication">）消息。
   </para>

   <note>
    <para>
     一个通过逻辑解码接收更改的同步复制机将工作在一个单一数据库的范围内。
     因为与之相反，<parameter>synchronous_standby_names</parameter>
     当前是服务器范围的，这意味着如果有多于一个数据库被活跃地使用，这种技术将
     无法正常工作。
     </para>
   </note>
  </sect1>
 </chapter>
